<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name "lucky">
  <!ENTITY author "stl88083365">
  <!ENTITY version "2025.07.29">
  <!ENTITY launch "Settings/lucky">
  <!ENTITY gitURL "https://github.com/&author;/unraid-&name;/raw/main">
  <!ENTITY pluginURL "&gitURL;/&name;.plg">
  <!ENTITY md5 "06d8080d582a92196c9060c1429f9270">
  <!ENTITY plugin "/boot/config/plugins/&name;">
  <!ENTITY emhttp "/usr/local/emhttp/plugins/&name;">
  <!ENTITY packages "/boot/config/plugins/&name;/packages">
]>

<PLUGIN
  name="&name;"
  author="&author;"
  version="&version;"
  launch="&launch;"
  pluginURL="&pluginURL;"
  min="6.9.0-beta31"
>
  <CHANGES>
    ###2024.07.28
    - Added a custom suffix to temporarily save in cookies. 

    ###2024.07.05
    - Reboot to automatically run lucky

    ###2024.07.05
    - Customizing the lucky version
      Download the specified version from the official website and extract the file to the /boot/config/lucky/ directory.

    ###2024.06.20
    - update lucky

    ###2024.06.04
    - Tested ...
  </CHANGES>

  <FILE Name="&emhttp;/README.md">
    <INLINE>
      **lucky**

      For further information go to the source Github repository: https://github.com/stl88083365/unraid-lucky .  

      Lucky is highly customizable and supports the running of various custom scripts.
      However, once the account password and backend entrance are leaked, it may bring unforeseen consequences.
      Therefore, it is very important to set up a secure portal.
      When you set the secure entry to 666, the Lucky login page will not be displayed when you visit http://{IP}:16601.
      Instead, you will need to visit http://{IP}:16601/666. Therefore, please try to make the secure entry as complex as possible and use HTTPS when accessing from outside the network.

      Default login : http://{IP address}:16601
      Default Account Number : 666
      Default Password : 666
    </INLINE>
  </FILE>

  <FILE Run="/bin/bash">
    <INLINE>
      get_version() {
        REPO_OWNER="stl88083365"
        REPO_NAME="unraid-lucky"
        API_URL="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/latest"
        LATEST_RELEASE_INFO=$(curl -s -L -H "Accept: application/vnd.github.v3+json" -H "User-Agent: unraid-lucky-plugin" "$API_URL")

        if [ -z "$LATEST_RELEASE_INFO" ]; then
          echo "获取 GitHub release 信息失败"
          rm -rf &plugin; &emhttp;
          exit 1
        fi

        DL_URL=$(echo "$LATEST_RELEASE_INFO" | grep -A 10 '"name": "unraid-lucky-.*\\.txz"' | grep '"browser_download_url":' | head -n 1 | awk -F'"' '{print $4}')
        LAT_PACKAGE=$(basename "$DL_URL")
      }

      download_lucky() {
        local url="$1"
        local out="$2"
        local retry=3
        local count=0
        local success=0

        while [ $count -lt $retry ]; do
          echo "正在下载 $url 到 $out (第$((count+1))次尝试)..."
          wget -q --show-progress --progress=bar:force:noscroll -O "$out" "$url" && success=1 && break
          count=$((count+1))
          sleep 2
        done

        if [ $success -eq 1 ]; then
          echo "下载成功: $out"
          return 0
        else
          echo "下载失败: $url"
          return 1
        fi
      }

      check() {
        if ! ls -1 &packages;/ | grep -q "${PACKAGE}" ; then
          get_version
          if [ -z "$DL_URL" ]; then
            echo "未找到可用的 lucky .txz 下载链接，安装中止。"
            rm -rf &plugin; &emhttp;
            exit 1
          fi
          PKG_PATH="&packages;/$LAT_PACKAGE"
          echo
          echo "+=============================================================================="
          echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
          echo "|"
          echo "| Don&apos;t close this window with the red &apos;X&apos; in the top right corner until the &apos;DONE&apos; button is displayed!"
          echo "|"
          echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
          echo "+=============================================================================="
          echo
          echo "-----------------Downloading lucky Package v$(echo $LAT_PACKAGE | cut -d '-' -f3)------------------"
          echo "----------This could take some time, please don&apos;t close this window!------------"
          download_lucky "$DL_URL" "$PKG_PATH" || { rm -f "$PKG_PATH"; rm -rf &plugin; &emhttp;; exit 1; }
        else
          CUR_V="$(ls -p &packages; 2>/dev/null | grep -E -v '\.md5$' | sort -V | tail -1)"
          LAT_PACKAGE=$CUR_V
          echo
          echo "--------------------lucky v$(echo $LAT_PACKAGE | cut -d '-' -f3) found locally---------------------"
        fi
      }

      install_package() {
        /sbin/installpkg "&packages;/${LAT_PACKAGE}"
        if [ ! -f /etc/lucky/lucky ]; then
          echo "Error: lucky binary not found after installation. Please check package content."
          exit 1
        fi
        chmod +x /etc/lucky/lucky
        sh /usr/local/emhttp/plugins/lucky/scripts/luckypid.sh
      }

      activate() {
        echo "Activating lucky..."
      }

      REPO_OWNER="stl88083365"
      REPO_NAME="unraid-lucky"
      PACKAGE="unraid-lucky"

      if [ ! -d "&packages;" ]; then
        mkdir -p "&packages;"
        CUR_V=""
      else
        CUR_V="$(ls -p &packages; 2>/dev/null | grep -E -v '\.md5$' | sort -V | tail -1)"
      fi

      if [ ! -f "&plugin;/settings.cfg" ]; then
        echo 'first_installation=true
driver_version=latest
disable_xconfig=false
update_check=true' > "&plugin;/settings.cfg"
      fi

      if ! grep -q "update_check=" "&plugin;/settings.cfg"; then
        echo "update_check=true" >> "&plugin;/settings.cfg"
      fi

      check

      if [ ! -f /etc/lucky/lucky ]; then
        echo
        echo "-----------------Installing lucky Package v$(echo $LAT_PACKAGE | cut -d '-' -f3)-------------------"
        install_package > /dev/null
        activate
      else
        activate
      fi
    </INLINE>
  </FILE>

  <FILE Run="/bin/bash" Method="remove">
    <INLINE>
      echo "---------------------------------------"
      echo "------Uninstalling lucky-------"
      echo "---------------------------------------"
      PID=$(pidof lucky)
      if [ ! -z "$PID" ]; then
        echo "Lucky process is running. Stopping it..."
        kill $PID
        wait $PID 2>/dev/null
        echo "Lucky process has been stopped."
      else
        echo "Lucky process is not running."
      fi
      rm -rf &plugin;
      rm -rf &emhttp;
      rm -rf /etc/lucky
      echo
      echo "----------------------------------------------------------------------------"
      echo "----------lucky uninstalled, please reboot your server!------------"
      echo "----------------------------------------------------------------------------"
      echo
    </INLINE>
  </FILE>
</PLUGIN>