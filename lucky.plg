<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name "lucky">
<!ENTITY author "stl88083365">
<!ENTITY version "2025.07.29">
<!ENTITY launch "Settings/lucky">
<!ENTITY gitURL "https://github.com/&author;/unraid-&name;/raw/main">
<!ENTITY pluginURL "&gitURL;/&name;.plg">
<!ENTITY md5 "06d8080d582a92196c9060c1429f9270">
<!ENTITY plugin "/boot/config/plugins/&name;">
<!ENTITY emhttp "/usr/local/emhttp/plugins/&name;">
<!ENTITY packages "/boot/config/plugins/&name;/packages">
]>
<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.9.0-beta31">

<CHANGES>
###2024.07.28
- Added a custom suffix to temporarily save in cookies. 

###2024.07.05
- Reboot to automatically run lucky

###2024.07.05
- Customizing the lucky version
Download the specified version from the official website and extract the file to the /boot/config/lucky/ directory.

###2024.06.20
- update lucky

###2024.06.04
- Tested ...

</CHANGES>

<FILE Name="&emhttp;/README.md">
<INLINE>

**lucky**

For further information go to the source Github repository: https://github.com/stl88083365/unraid-lucky .  

Lucky is highly customizable and supports the running of various custom scripts.
However, once the account password and backend entrance are leaked, it may bring unforeseen consequences.
Therefore, it is very important to set up a secure portal.
When you set the secure entry to 666, the Lucky login page will not be displayed when you visit http://{IP}:16601.
Instead, you will need to visit http://{IP}:16601/666. Therefore, please try to make the secure entry as complex as possible and use HTTPS when accessing from outside the network.

Default login : http://{IP address}:16601
Default Account Number : 666
Default Password : 666

</INLINE>
</FILE>

<FILE Run="/bin/bash">
<INLINE>

download() {
#Download lucky Package
if wget -q -nc --show-progress --progress=bar:force:noscroll -O "&packages;/${LAT_PACKAGE}" "${DL_URL}" ; then
# MD5 check might need adjustment if releases don't provide .md5 files
# wget -q -nc --show-progress --progress=bar:force:noscroll -O "&packages;/${LAT_PACKAGE}.md5" "${DL_URL}/${LAT_PACKAGE}.md5"
# if [ "$(md5sum &packages;/${LAT_PACKAGE} | awk '{print $1}')" != "$(cat &packages;/${LAT_PACKAGE}.md5 | awk '{print $1}')" ]; then
# echo
# echo "-----ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR - ERROR------"
# echo "--------------------------------CHECKSUM ERROR!---------------------------------"
# rm -rf &plugin; &emhttp;
# exit 1
# fi
echo
echo "----Successfully downloaded lucky Package v$(echo $LAT_PACKAGE | cut -d '-' -f3), please wait!----"
else
echo
echo "--------------Can't download lucky Package v$(echo $LAT_PACKAGE | cut -d '-' -f3)-----------------"
rm -rf &plugin; &emhttp;
exit 1
fi
}

get_version() {
set -x # Enable debugging
# Fetch latest release info
LATEST_RELEASE_INFO=$(curl -s -v -L -H "Accept: application/vnd.github.v3+json" -H "User-Agent: unraid-lucky-plugin" "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/latest")
echo "LATEST_RELEASE_INFO: $LATEST_RELEASE_INFO"

if [ -z "$LATEST_RELEASE_INFO" ]; then
  echo "Error: Failed to fetch release info from GitHub API. Check network or API limits."
  rm -rf &plugin; &emhttp;
  exit 1
fi
DL_URL=""
LAT_PACKAGE=""

# Try to find .txz asset in releases
if [ -n "$LATEST_RELEASE_INFO" ]; then
  # Extract browser_download_url for .txz asset
  DL_URL=$(echo "$LATEST_RELEASE_INFO" | grep '"browser_download_url":' | awk -F'"' '{print $4}' | grep '.txz
   | head -n 1)
  