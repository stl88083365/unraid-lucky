<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
  <!ENTITY name      "lucky">
  <!ENTITY author    "stl88083365">
  <!ENTITY version   "2025.07.29">
  <!ENTITY gitURL    "https://github.com/&author;/unraid-lucky/releases/download">
  <!ENTITY pluginURL "https://raw.githubusercontent.com/stl88083365/unraid-lucky/main/lucky.plg">
  <!ENTITY md5       "06d8080d582a92196c9060c1429f9270">
  <!ENTITY plugin    "/boot/config/plugins/lucky">
  <!ENTITY emhttp    "/usr/local/emhttp/plugins/lucky">
]>

<PLUGIN  name="&name;" author="&author;" version="&version;" pluginURL="&pluginURL;" min="6.9.0-beta31">

<CHANGES>
###2024.07.28
- Added a custom suffix to temporarily save in cookies. 

###2024.07.05
- Reboot to automatically run lucky

###2024.07.05
- Customizing the lucky version
Download the specified version from the official website and extract the file to the /boot/config/lucky/ directory.

###2024.06.20
- update lucky

###2024.06.04
- Tested ...

</CHANGES>

<FILE Name="&emhttp;/README.md">
<INLINE>

**lucky**

For further information go to the source Github repository: https://github.com/stl88083365/unraid-lucky .  
  
Lucky is highly customizable and supports the running of various custom scripts.
However, once the account password and backend entrance are leaked, it may bring unforeseen consequences.
Therefore, it is very important to set up a secure portal.
When you set the secure entry to 666, the Lucky login page will not be displayed when you visit http://{IP}:16601.
Instead, you will need to visit http://{IP}:16601/666. Therefore, please try to make the secure entry as complex as possible and use HTTPS when accessing from outside the network.

Default login : http://{IP address}:16601
Default Account Number : 666
Default Password : 666

</INLINE>
</FILE>

<FILE Run="/bin/bash">
<INLINE>

install() {
  REPO_OWNER="stl88083365"
  REPO_NAME="unraid-lucky"
  DOWNLOAD_DIR="/boot/config/plugins/lucky/download"

  mkdir -p "$DOWNLOAD_DIR"

  echo "Checking for latest lucky package..."

  # Get latest release info
  LATEST_RELEASE_TAG=""
  LATEST_RELEASE_URL=""
  LATEST_RELEASE_INFO=$(curl -s "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/latest")
  if echo "$LATEST_RELEASE_INFO" | grep -q "tag_name"; then
    LATEST_RELEASE_TAG=$(echo "$LATEST_RELEASE_INFO" | grep -oP '"tag_name": "\K[^"]+' | head -n 1)
    LATEST_RELEASE_URL=$(echo "$LATEST_RELEASE_INFO" | grep -oP '"browser_download_url": "\K[^"]+\.tar\.gz(?=")' | head -n 1)
  fi

  # Get latest package from packages directory
  LATEST_PACKAGE_NAME=""
  LATEST_PACKAGE_URL=""
  LATEST_PACKAGE_INFO=$(curl -s "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contents/packages" | grep -oP '"name": "\Klucky_.*\.tar\.gz(?=")' | sort -V | tail -n 1)
  if [ -n "$LATEST_PACKAGE_INFO" ]; then
    LATEST_PACKAGE_NAME="$LATEST_PACKAGE_INFO"
    LATEST_PACKAGE_URL="https://github.com/$REPO_OWNER/$REPO_NAME/raw/main/packages/$LATEST_PACKAGE_NAME"
  fi

  # Determine the latest version
  CURRENT_LATEST_VERSION=""
  FINAL_DOWNLOAD_URL=""
  FINAL_DOWNLOAD_NAME=""

  if [ -n "$LATEST_RELEASE_TAG" ] && [ -n "$LATEST_PACKAGE_NAME" ]; then
    # Extract version from package name (e.g., lucky_2.17.8_Linux_x86_64_wanji.tar.gz -> 2.17.8)
    PACKAGE_VERSION=$(echo "$LATEST_PACKAGE_NAME" | sed -E 's/lucky_([0-9.]+).*/\1/')

    # Compare versions
    if printf '%s\n' "$LATEST_RELEASE_TAG" "$PACKAGE_VERSION" | sort -V | tail -n 1 | grep -q "$LATEST_RELEASE_TAG"; then
      echo "Latest version found in releases: $LATEST_RELEASE_TAG"
      CURRENT_LATEST_VERSION="$LATEST_RELEASE_TAG"
      FINAL_DOWNLOAD_URL="$LATEST_RELEASE_URL"
      FINAL_DOWNLOAD_NAME=$(basename "$LATEST_RELEASE_URL")
    else
      echo "Latest version found in packages directory: $PACKAGE_VERSION"
      CURRENT_LATEST_VERSION="$PACKAGE_VERSION"
      FINAL_DOWNLOAD_URL="$LATEST_PACKAGE_URL"
      FINAL_DOWNLOAD_NAME="$LATEST_PACKAGE_NAME"
    fi
  elif [ -n "$LATEST_RELEASE_TAG" ]; then
    echo "Only release found: $LATEST_RELEASE_TAG"
    CURRENT_LATEST_VERSION="$LATEST_RELEASE_TAG"
    FINAL_DOWNLOAD_URL="$LATEST_RELEASE_URL"
    FINAL_DOWNLOAD_NAME=$(basename "$LATEST_RELEASE_URL")
  elif [ -n "$LATEST_PACKAGE_NAME" ]; then
    echo "Only package found in packages directory: $LATEST_PACKAGE_NAME"
    PACKAGE_VERSION=$(echo "$LATEST_PACKAGE_NAME" | sed -E 's/lucky_([0-9.]+).*/\1/')
    CURRENT_LATEST_VERSION="$PACKAGE_VERSION"
    FINAL_DOWNLOAD_URL="$LATEST_PACKAGE_URL"
    FINAL_DOWNLOAD_NAME="$LATEST_PACKAGE_NAME"
  else
    echo "Error: Could not find any lucky package in releases or packages directory."
    exit 1
  fi

  DOWNLOAD_PATH="$DOWNLOAD_DIR/$FINAL_DOWNLOAD_NAME"

  echo "Downloading $FINAL_DOWNLOAD_NAME from $FINAL_DOWNLOAD_URL..."
  wget -q -nc --show-progress --progress=bar:force:noscroll -O "$DOWNLOAD_PATH" "$FINAL_DOWNLOAD_URL"

  if [ ! -f "$DOWNLOAD_PATH" ]; then
      echo "The lucky package did not finish downloading, please check and retry!... ($DOWNLOAD_PATH)"
      exit 1
  else
      echo "The lucky package has been downloaded to $DOWNLOAD_PATH."
  fi

  if [ ! -d /boot/config/lucky ]; then
      echo "Directory /boot/config/lucky does not exist, creating it now..."
      mkdir -p /boot/config/lucky
  else
      echo "Directory /boot/config/lucky already exists."
  fi

  echo "Extracting lucky package from $DOWNLOAD_PATH to /boot/config/lucky/..."
  tar -xzf "$DOWNLOAD_PATH" -C /boot/config/lucky/ --strip-components=1 # --strip-components=1 to remove the top-level directory if present in tarball

  if [ ! -f /boot/config/lucky/lucky ]; then
      echo "No custom lucky files found after extraction. Please check the package content."
  else
      cp -rf /boot/config/lucky/lucky /etc/lucky/lucky
      echo "Copying a customized lucky file succeeds."
  fi

  chmod +x /etc/lucky/lucky
  sh /usr/local/emhttp/plugins/lucky/scripts/luckypid.sh

}

if [ ! -z "$(pidof lucky)" ]; then
    echo
   ## kill "$(pidof lucky)"
    echo "------------------Installation of lucky successful---------------------"
    echo
else
    echo
    echo "-------------------Downloading lucky, please wait...!-------------------"
    echo
    echo "-------------------Downloading And Installing lucky, please wait...!-------------------"
    install > /dev/null
    echo
    echo "------------------Installation of lucky successful---------------------"
    echo

fi


</INLINE>
</FILE>

<FILE Run="/bin/bash" Method="remove">
<INLINE>

echo "---------------------------------------"
echo "------Uninstalling lucky-------"
echo "---------------------------------------"
# Remove plugin related files
PID=$(pidof lucky)
if [ ! -z "$PID" ]; then
    echo "Lucky process is running. Stopping it..."
    kill $PID
    wait $PID 2>/dev/null
    echo "Lucky process has been stopped."
else
    echo "Lucky process is not running."
fi
rm -rf &plugin;
rm -rf &emhttp;
rm -rf /etc/lucky
echo
echo "----------------------------------------------------------------------------"
echo "----------lucky uninstalled, please reboot your server!-------------"
echo "----------------------------------------------------------------------------"
echo

</INLINE>
</FILE>
</PLUGIN>
