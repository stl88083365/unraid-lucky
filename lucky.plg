<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name "lucky">
  <!ENTITY author "stl88083365">
  <!ENTITY version "2025.07.02">
  <!ENTITY launch "Settings/lucky">
  <!ENTITY gitURL "https://github.com/&author;/unraid-&name;/raw/main">
  <!ENTITY pluginURL "&gitURL;/&name;.plg">
  <!ENTITY md5 "06d8080d582a92196c9060c1429f9270">
  <!ENTITY plugin "/boot/config/plugins/&name;">
  <!ENTITY emhttp "/usr/local/emhttp/plugins/&name;">
  <!ENTITY packages "/boot/config/plugins/&name;/packages">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.9.0-beta31">
  <CHANGES>
    ###2025.07.02
    - Updated version of lucky. 
    ###2024.07.28
    - Added a custom suffix to temporarily save in cookies. 

    ###2024.07.05
    - Reboot to automatically run lucky

    ###2024.07.05
    - Customizing the lucky version
      Download the specified version from the official website and extract the file to the /boot/config/lucky/ directory.

    ###2024.06.20
    - update lucky

    ###2024.06.04
    - Tested ...
  </CHANGES>

  <FILE Name="&emhttp;/README.md">
    <INLINE>
      **lucky**

      For further information go to the source Github repository: https://github.com/stl88083365/unraid-lucky .  

      Lucky is highly customizable and supports the running of various custom scripts.
      However, once the account password and backend entrance are leaked, it may bring unforeseen consequences.
      Therefore, it is very important to set up a secure portal.
      When you set the secure entry to 666, the Lucky login page will not be displayed when you visit http://{IP}:16601.
      Instead, you will need to visit http://{IP}:16601/666. Therefore, please try to make the secure entry as complex as possible and use HTTPS when accessing from outside the network.

      Default login : http://{IP address}:16601
      Default Account Number : 666
      Default Password : 666
    </INLINE>
  </FILE>

  <FILE Run="/bin/bash">
    <INLINE>
      download() {
        # Download lucky Package
        if wget -q -nc --show-progress --progress=bar:force:noscroll -O "/boot/config/plugins/lucky/packages/${LAT_PACKAGE}" "${DL_URL}" ; then
          echo
          echo "----Successfully downloaded lucky Package v$(echo $LAT_PACKAGE | cut -d '-' -f3), please wait!----"
        else
          echo
          echo "--------------Cannot download lucky Package v$(echo $LAT_PACKAGE | cut -d '-' -f3)-----------------"
          rm -rf /boot/config/plugins/lucky /usr/local/emhttp/plugins/lucky
          exit 1
        fi
      }

      get_version() {
        # Fetch latest release info
        LATEST_RELEASE_INFO=$(curl -s -L -H "Accept: application/vnd.github.v3+json" -H "User-Agent: unraid-lucky-plugin" "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/latest")
        
        if [ -z "$LATEST_RELEASE_INFO" ]; then
          echo "Error: Failed to fetch release info from GitHub API. Check network or API limits."
          rm -rf /boot/config/plugins/lucky /usr/local/emhttp/plugins/lucky
          exit 1
        fi

        # Extract download URL for .txz file using simpler method
        DL_URL=$(echo "$LATEST_RELEASE_INFO" | grep -o '"browser_download_url":"[^"]*\.txz"' | head -1 | sed 's/"browser_download_url":"//' | sed 's/"$//')
        
        if [ -z "$DL_URL" ]; then
          echo "Error: Could not find .txz download URL in release assets"
          rm -rf /boot/config/plugins/lucky /usr/local/emhttp/plugins/lucky
          exit 1
        fi
        
        LAT_PACKAGE=$(basename "$DL_URL")
        echo "DL_URL from releases: $DL_URL"
        echo "LAT_PACKAGE from releases: $LAT_PACKAGE"
      }

      check() {
        if ! ls -1 /boot/config/plugins/lucky/packages/ 2>/dev/null | grep -q "${PACKAGE}" ; then
          get_version
          echo
          echo "+=============================================================================="
          echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
          echo "|"
          echo "| Do not close this window with the red X in the top right corner until the DONE button is displayed!"
          echo "|"
          echo "| WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING - WARNING"
          echo "+=============================================================================="
          echo
          echo "-----------------Downloading lucky Package v$(echo $LAT_PACKAGE | cut -d '-' -f3)------------------"
          echo "----------This could take some time, please do not close this window!------------"
          download
        else
          LAT_PACKAGE=$CUR_V
          echo
          echo "--------------------lucky v$(echo $LAT_PACKAGE | cut -d '-' -f3) found locally---------------------"
        fi
      }

      install_package() {
        /sbin/installpkg "/boot/config/plugins/lucky/packages/${LAT_PACKAGE}"
        if [ ! -f /etc/lucky/lucky ]; then
          echo "Error: lucky binary not found after installation. Please check package content."
          exit 1
        fi
        chmod +x /etc/lucky/lucky
        if [ -f /usr/local/emhttp/plugins/lucky/scripts/luckypid.sh ]; then
          sh /usr/local/emhttp/plugins/lucky/scripts/luckypid.sh
        fi
      }

      activate() {
        echo "Activating lucky..."
      }

      REPO_OWNER="stl88083365"
      REPO_NAME="unraid-lucky"
      PACKAGE="unraid-lucky"

      if [ ! -d "/boot/config/plugins/lucky/packages" ]; then
        mkdir -p "/boot/config/plugins/lucky/packages"
        CUR_V=""
      else
        CUR_V="$(ls -p /boot/config/plugins/lucky/packages/ 2>/dev/null | grep -E -v '\.md5$' | sort -V | tail -1)"
      fi

      if [ ! -f "/boot/config/plugins/lucky/settings.cfg" ]; then
        echo 'first_installation=true
driver_version=latest
disable_xconfig=false
update_check=true' > "/boot/config/plugins/lucky/settings.cfg"
      fi

      if ! grep -q "update_check=" "/boot/config/plugins/lucky/settings.cfg"; then
        echo "update_check=true" >> "/boot/config/plugins/lucky/settings.cfg"
      fi

      check

      if [ ! -f /etc/lucky/lucky ]; then
        echo
        echo "-----------------Installing lucky Package v$(echo $LAT_PACKAGE | cut -d '-' -f3)-------------------"
        install_package > /dev/null
        activate
      else
        activate
      fi
    </INLINE>
  </FILE>

  <FILE Run="/bin/bash" Method="remove">
    <INLINE>
      echo "---------------------------------------"
      echo "------Uninstalling lucky-------"
      echo "---------------------------------------"
      PID=$(pidof lucky)
      if [ ! -z "$PID" ]; then
        echo "Lucky process is running. Stopping it..."
        kill $PID
        wait $PID 2>/dev/null
        echo "Lucky process has been stopped."
      else
        echo "Lucky process is not running."
      fi
      rm -rf /boot/config/plugins/lucky
      rm -rf /usr/local/emhttp/plugins/lucky
      rm -rf /etc/lucky
      echo
      echo "----------------------------------------------------------------------------"
      echo "----------lucky uninstalled, please reboot your server!------------"
      echo "----------------------------------------------------------------------------"
      echo
    </INLINE>
  </FILE>
</PLUGIN>